{"entries":[{"timestamp":1734340484964,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"const min: number = 2000;\nconst max: number = 8000;\nlet startTime: number = 0;\nlet endTime: number = 0;\nlet reactionTimeDelay: number = 0;\nlet delayComplete: boolean = false;  // Flag to track if delay is complete\n\nbasic.showLeds(`\n    . . . . .\n    . . . . .\n    . . # . .\n    . . . . .\n    . . . . .\n`);\n\ninput.onButtonPressed(Button.A, function () {\n    reactionTimeDelay = Math.randomRange(min, max); // Random delay\n    basic.showLeds(`\n        . . . . .\n        . # # # .\n        . # . # .\n        . # # # .\n        . . . . .\n    `);\n    delayComplete = false;  // Reset the flag before starting new round\n    basic.pause(reactionTimeDelay); // Wait for random time\n    delayComplete = true;  // Set flag to true, allowing button B press\n    basic.showLeds(`\n        . . . . .\n        . . . . .\n        . . . . .\n        . . . . .\n        . . . . .\n    `);\n    startTime = control.millis(); // Record start time\n});\n\ninput.onButtonPressed(Button.B, function () {\n    if (delayComplete) {  // Only process Button B after delayComplete is true\n        endTime = control.millis(); // Record end time\n        let reactionTime = (endTime - startTime) / 10; // Calculate reaction time\n        basic.showNumber(reactionTime); // Display reaction time\n\n        // Reset the game after displaying the time\n        basic.pause(1000); // Show result for 1 second\n        basic.clearScreen(); // Clear the display\n        startTime = 0; // Reset start time\n        endTime = 0; // Reset end time\n        reactionTimeDelay = 0; // Reset the random delay\n        delayComplete = false;  // Reset the flag for next round\n\n        basic.showLeds(`\n            . . . . .\n            . . . . .\n            . . # . .\n            . . . . .\n            . . . . .\n        `); // Ready for next round\n    }\n});"],[1,"\n"]],"start1":0,"start2":0,"length1":1793,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"pt-only\""],[1,",\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":279,"start2":279,"length1":11,"length2":42}]}]},{"timestamp":1737652639007,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":207,"start2":207,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"},{"type":"added","filename":"main.blocks","value":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"}]}],"snapshots":[{"timestamp":1734340484963,"editorVersion":"7.0.51","text":{"main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"pxt-numtest\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\",\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1737652639007,"editorVersion":"7.0.57","text":{"main.ts":"const min: number = 2000;\nconst max: number = 8000;\nlet startTime: number = 0;\nlet endTime: number = 0;\nlet reactionTimeDelay: number = 0;\nlet delayComplete: boolean = false;  // Flag to track if delay is complete\n\nbasic.showLeds(`\n    . . . . .\n    . . . . .\n    . . # . .\n    . . . . .\n    . . . . .\n`);\n\ninput.onButtonPressed(Button.A, function () {\n    reactionTimeDelay = Math.randomRange(min, max); // Random delay\n    basic.showLeds(`\n        . . . . .\n        . # # # .\n        . # . # .\n        . # # # .\n        . . . . .\n    `);\n    delayComplete = false;  // Reset the flag before starting new round\n    basic.pause(reactionTimeDelay); // Wait for random time\n    delayComplete = true;  // Set flag to true, allowing button B press\n    basic.showLeds(`\n        . . . . .\n        . . . . .\n        . . . . .\n        . . . . .\n        . . . . .\n    `);\n    startTime = control.millis(); // Record start time\n});\n\ninput.onButtonPressed(Button.B, function () {\n    if (delayComplete) {  // Only process Button B after delayComplete is true\n        endTime = control.millis(); // Record end time\n        let reactionTime = (endTime - startTime) / 10; // Calculate reaction time\n        basic.showNumber(reactionTime); // Display reaction time\n\n        // Reset the game after displaying the time\n        basic.pause(1000); // Show result for 1 second\n        basic.clearScreen(); // Clear the display\n        startTime = 0; // Reset start time\n        endTime = 0; // Reset end time\n        reactionTimeDelay = 0; // Reset the random delay\n        delayComplete = false;  // Reset the flag for next round\n\n        basic.showLeds(`\n            . . . . .\n            . . . . .\n            . . # . .\n            . . . . .\n            . . . . .\n        `); // Ready for next round\n    }\n});","README.md":"","pxt.json":"{\n    \"name\": \"pxt-numtest\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\"\n}\n"}}],"shares":[],"lastSaveTime":1737652639011}